// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSInit
#pragma kernel CSMain

#define GROUP_SIZE_X 32
#define GROUP_SIZE_Y 32
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Result;
//int2 neighbourCoords[8] = { int2(-1,-1), int2(-1,0), int2(-1,1), int2(1,-1), int2(1,0), int2(1,1), int2(0,-1), int2(0,1) }; NOT Working for some reason!!!

float rand(float2 coord) {
    return frac(sin(dot(coord, float2(100.9898, 8.233))) * 40000.913) > 0.8 ? 1 : 0;
}

int countNeighbours(float2 coord) 
{
    int aliveNeighboursCount = 0;
    int2 neighbourCoords[8] = { int2(-1,-1), int2(-1,0), int2(-1,1), int2(1,-1), int2(1,0), int2(1,1), int2(0,-1), int2(0,1) };

    [unroll(8)]
    for (int x = 0; x < 8; x++) 
    {
        if (Result[coord + neighbourCoords[x]] > 0) aliveNeighboursCount++;
    }
   
    return aliveNeighboursCount;
}

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void CSInit(uint3 id : SV_DispatchThreadID)
{
    Result[id.xy] = rand(id.xy);
}

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    //Result[id.xy] = Result[id.xy]; static image
    int aliveNeighboursCount = 0;
    int2 neighbourCoords[8] = { int2(-1,-1), int2(-1,0), int2(-1,1), int2(1,-1), int2(1,0), int2(1,1), int2(0,-1), int2(0,1) };

    [unroll(8)]
    for (int x = 0; x < 8; x++) 
    {
        if (Result[id.xy + neighbourCoords[x]] > 0) aliveNeighboursCount++;
    }
    float lifeStatus= aliveNeighboursCount > 3 || aliveNeighboursCount < 2? 0 : 1;
    float deathStatus = aliveNeighboursCount == 3 ? 1 : 0;
    Result[id.xy] = Result[id.xy] ? lifeStatus:deathStatus;
}
